
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// user management

enum UserRole {
  FARMER
  BUYER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  password          String
  name              String
  phone             String?
  avatar            String?
  role              UserRole
  status            UserStatus         @default(ACTIVE)
  verificationStatus VerificationStatus @default(PENDING)
  emailVerified     Boolean            @default(false)
  phoneVerified     Boolean            @default(false)
  lastLoginAt       DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  // Profile relationships
  farmerProfile     FarmerProfile?
  buyerProfile      BuyerProfile?
  addresses         Address[]
  
  // Activity relationships
  orders            Order[]
  reviews           Review[]
  messages          Message[]
  conversations     ConversationParticipant[]
  notifications     Notification[]
  analytics         UserAnalytics[]
  
  // E-commerce relationships
  cart              CartItem[]
  favorites         Favorite[]
  paymentMethods    PaymentMethod[]
  
  // System relationships
  auditLogs         AuditLog[]
  sessions          UserSession[]

  @@map("users")
}

model FarmerProfile {
  id                String    @id @default(cuid())
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  farmName          String
  farmDescription   String?
  farmSize          Float?    
  farmingExperience Int?      
  specialization    String[]  
  certifications    String[]  
  
  // Location
  latitude          Float?
  longitude         Float?
  address           String?
  city              String?
  state             String?
  zipCode           String?
  country           String    @default("Bangladesh")
  
  // Business info
  businessLicense   String?
  taxId             String?
  bankAccount       String?
  
  // Performance metrics
  totalSales        Float     @default(0)
  totalOrders       Int       @default(0)
  averageRating     Float     @default(0)
  responseTime      Int       @default(0) 
  
  // Status
  isVerified        Boolean   @default(false)
  isActive          Boolean   @default(true)
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relationships
  products          Product[]
  orders            Order[]
  inventory         InventoryItem[]
  customers         CustomerRelation[]

  @@map("farmer_profiles")
}

model BuyerProfile {
  id                String    @id @default(cuid())
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  dateOfBirth       DateTime?
  gender            String?
  occupation        String?
  
  // Preferences
  dietaryPreferences String[] 
  allergies         String[]
  preferredCategories String[]
  
  // Shopping behavior
  totalSpent        Float     @default(0)
  totalOrders       Int       @default(0)
  averageOrderValue Float     @default(0)
  loyaltyPoints     Int       @default(0)
  
  // Preferences
  notificationPreferences Json @default("{}")
  privacySettings   Json      @default("{}")
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relationships
  customerRelations CustomerRelation[]

  @@map("buyer_profiles")
}

model Address {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type          String   @default("shipping") 
  firstName     String
  lastName      String
  company       String?
  addressLine1  String
  addressLine2  String?
  city          String
  state         String
  zipCode       String
  country       String    @default("Bangladesh")
  phone         String?
  
  isDefault     Boolean   @default(false)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relationships
  orders        Order[]
  deliveries    Delivery[]

  @@map("addresses")
}


// product management

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
  DISCONTINUED
}

model Category {
  id            String    @id @default(cuid())
  name          String    @unique
  slug          String    @unique
  description   String?
  image         String?
  parentId      String?
  parent        Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children      Category[] @relation("CategoryHierarchy")
  
  isActive      Boolean   @default(true)
  sortOrder     Int       @default(0)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relationships
  products      Product[]

  @@map("categories")
}

model Product {
  id                String        @id @default(cuid())
  farmerId          String
  farmer            FarmerProfile @relation(fields: [farmerId], references: [id], onDelete: Cascade)
  categoryId        String
  category          Category      @relation(fields: [categoryId], references: [id])
  
  name              String
  slug              String        @unique
  description       String?
  shortDescription  String?
  
  // Pricing
  price             Float
  comparePrice      Float?        
  costPrice         Float?        
  
  // Inventory
  sku               String?       @unique
  stock             Int           @default(0)
  minStock          Int           @default(0)
  maxStock          Int?
  
  // Physical properties
  weight            Float?        
  dimensions        Json?         
  unit              String        @default("kg") 
  
  // Product details
  images            String[]
  tags              String[]
  
  // Nutritional info
  nutritionalInfo   Json?         
  
  // Certifications
  isOrganic         Boolean       @default(false)
  certifications    String[]
  
  // SEO
  metaTitle         String?
  metaDescription   String?
  
  // Status
  status            ProductStatus @default(ACTIVE)
  isFeature         Boolean       @default(false)
  
  // Metrics
  viewCount         Int           @default(0)
  salesCount        Int           @default(0)
  averageRating     Float         @default(0)
  reviewCount       Int           @default(0)
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Relationships
  orderItems        OrderItem[]
  reviews           Review[]
  cartItems         CartItem[]
  favorites         Favorite[]
  inventory         InventoryItem[]
  promotions        ProductPromotion[]

  @@map("products")
}

model InventoryItem {
  id            String        @id @default(cuid())
  productId     String
  product       Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  farmerId      String
  farmer        FarmerProfile @relation(fields: [farmerId], references: [id], onDelete: Cascade)
  
  quantity      Int
  reservedQty   Int           @default(0) 
  availableQty  Int           
  
  batchNumber   String?
  expiryDate    DateTime?
  harvestDate   DateTime?
  
  location      String?      
  notes         String?
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relationships
  logs          InventoryLog[]

  @@map("inventory_items")
}

enum InventoryAction {
  STOCK_IN
  STOCK_OUT
  ADJUSTMENT
  RESERVED
  RELEASED
  EXPIRED
  DAMAGED
}

model InventoryLog {
  id            String          @id @default(cuid())
  inventoryId   String
  inventory     InventoryItem   @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  
  action        InventoryAction
  quantity      Int
  previousQty   Int
  newQty        Int
  
  reason        String?
  reference     String?       
  
  createdAt     DateTime        @default(now())

  @@map("inventory_logs")
}

// order management

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

model Order {
  id                String        @id @default(cuid())
  orderNumber       String        @unique
  
  // Customer info
  buyerId           String
  buyer             User          @relation(fields: [buyerId], references: [id])
  
  // Farmer info
  farmerId          String
  farmer            FarmerProfile @relation(fields: [farmerId], references: [id])
  
  // Address info
  shippingAddressId String
  shippingAddress   Address       @relation(fields: [shippingAddressId], references: [id])
  
  // Order details
  status            OrderStatus   @default(PENDING)
  paymentStatus     PaymentStatus @default(PENDING)
  
  // Pricing
  subtotal          Float
  taxAmount         Float         @default(0)
  shippingAmount    Float         @default(0)
  discountAmount    Float         @default(0)
  totalAmount       Float
  
  // Dates
  orderDate         DateTime      @default(now())
  confirmedAt       DateTime?
  shippedAt         DateTime?
  deliveredAt       DateTime?
  cancelledAt       DateTime?
  
  // Additional info
  notes             String?
  specialInstructions String?
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Relationships
  items             OrderItem[]
  payments          Payment[]
  delivery          Delivery?
  reviews           Review[]
  statusHistory     OrderStatusHistory[]

  @@map("orders")
}

model OrderItem {
  id            String  @id @default(cuid())
  orderId       String
  order         Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId     String
  product       Product @relation(fields: [productId], references: [id])
  
  quantity      Int
  unitPrice     Float
  totalPrice    Float
  
  // Product snapshot at time of order
  productName   String
  productImage  String?
  productSku    String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("order_items")
}

model OrderStatusHistory {
  id            String      @id @default(cuid())
  orderId       String
  order         Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  status        OrderStatus
  notes         String?
  createdAt     DateTime    @default(now())

  @@map("order_status_history")
}

// payment management

enum PaymentMethodType {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  MOBILE_BANKING
  CASH_ON_DELIVERY
  DIGITAL_WALLET
}

enum PaymentGateway {
  STRIPE
  BKASH
  NAGAD
  ROCKET
  SSLCOMMERZ
}

model PaymentMethod {
  id            String            @id @default(cuid())
  userId        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type          PaymentMethodType
  gateway       PaymentGateway?
  
  // Card details (encrypted)
  last4         String?
  brand         String?
  expiryMonth   Int?
  expiryYear    Int?
  
  // Mobile banking
  phoneNumber   String?
  
  // Bank details
  bankName      String?
  accountNumber String?
  
  isDefault     Boolean           @default(false)
  isActive      Boolean           @default(true)
  
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  
  // Relationships
  payments      Payment[]

  @@map("payment_methods")
}

model Payment {
  id                String        @id @default(cuid())
  orderId           String
  order             Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  paymentMethodId   String?
  paymentMethod     PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  
  amount            Float
  currency          String        @default("BDT")
  status            PaymentStatus @default(PENDING)
  
  // Gateway details
  gateway           PaymentGateway?
  gatewayTransactionId String?
  gatewayResponse   Json?
  
  // Timestamps
  paidAt            DateTime?
  failedAt          DateTime?
  refundedAt        DateTime?
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@map("payments")
}

// delivery management

enum DeliveryStatus {
  PENDING
  ASSIGNED
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
  RETURNED
}

model Delivery {
  id                String         @id @default(cuid())
  orderId           String         @unique
  order             Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  deliveryAddressId String
  deliveryAddress   Address        @relation(fields: [deliveryAddressId], references: [id])
  
  status            DeliveryStatus @default(PENDING)
  
  // Driver info
  driverName        String?
  driverPhone       String?
  vehicleInfo       String?
  
  // Tracking
  trackingNumber    String?        @unique
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  
  // Location tracking
  currentLatitude   Float?
  currentLongitude  Float?
  
  // Delivery details
  deliveryNotes     String?
  deliveryImage     String?       
  recipientName     String?
  recipientSignature String?
  
  // Timestamps
  assignedAt        DateTime?
  pickedUpAt        DateTime?
  deliveredAt       DateTime?
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  // Relationships
  trackingHistory   DeliveryTracking[]

  @@map("deliveries")
}

model DeliveryTracking {
  id            String         @id @default(cuid())
  deliveryId    String
  delivery      Delivery       @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  
  status        DeliveryStatus
  location      String?
  latitude      Float?
  longitude     Float?
  notes         String?
  
  createdAt     DateTime       @default(now())

  @@map("delivery_tracking")
}

// messaging system

enum ConversationType {
  ORDER_INQUIRY
  PRODUCT_INQUIRY
  SUPPORT
  GENERAL
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

model Conversation {
  id            String        @id @default(cuid())
  type          ConversationType @default(GENERAL)
  subject       String?
  
  // Reference to order or product if applicable
  orderId       String?
  productId     String?
  
  isActive      Boolean       @default(true)
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relationships
  participants  ConversationParticipant[]
  messages      Message[]

  @@map("conversations")
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  joinedAt       DateTime     @default(now())
  lastReadAt     DateTime?
  
  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  senderId       String
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  
  content        String
  attachments    String[]    
  
  status         MessageStatus @default(SENT)
  
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("messages")
}

// review system
enum ReviewType {
  PRODUCT
  FARMER
  ORDER
}

model Review {
  id            String     @id @default(cuid())
  type          ReviewType
  
  // Reviewer
  reviewerId    String
  reviewer      User       @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  
  // Review targets
  productId     String?
  product       Product?   @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderId       String?
  order         Order?     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  rating        Int        
  title         String?
  comment       String?
  images        String[]   
  
  // Verification
  isVerified    Boolean    @default(false)
  isPurchaseVerified Boolean @default(false)
  
  // Engagement
  helpfulCount  Int        @default(0)
  reportCount   Int        @default(0)
  
  // Response
  response      String?    
  responseDate  DateTime?
  
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("reviews")
}

// e-commerce system
model CartItem {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId     String
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  quantity      Int
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([userId, productId])
  @@map("cart_items")
}

enum FavoriteType {
  PRODUCT
  FARMER
}

model Favorite {
  id            String       @id @default(cuid())
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  type          FavoriteType
  
  productId     String?
  product       Product?     @relation(fields: [productId], references: [id], onDelete: Cascade)
  farmerId      String?
  
  createdAt     DateTime     @default(now())
  
  @@unique([userId, productId])
  @@unique([userId, farmerId])
  @@map("favorites")
}

// promotion management
enum PromoType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
  BUY_ONE_GET_ONE
}

model Promotion {
  id                String    @id @default(cuid())
  name              String
  description       String?
  code              String?   @unique
  
  type              PromoType
  value             Float    
  
  // Conditions
  minOrderAmount    Float?
  maxDiscountAmount Float?
  usageLimit        Int?
  usageCount        Int       @default(0)
  
  // Validity
  startDate         DateTime
  endDate           DateTime
  isActive          Boolean   @default(true)
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relationships
  products          ProductPromotion[]

  @@map("promotions")
}

model ProductPromotion {
  id            String    @id @default(cuid())
  productId     String
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  promotionId   String
  promotion     Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime  @default(now())
  
  @@unique([productId, promotionId])
  @@map("product_promotions")
}

// customer relationship management

model CustomerRelation {
  id            String        @id @default(cuid())
  farmerId      String
  farmer        FarmerProfile @relation(fields: [farmerId], references: [id], onDelete: Cascade)
  buyerId       String
  buyer         BuyerProfile  @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  
  // Relationship metrics
  totalOrders   Int           @default(0)
  totalSpent    Float         @default(0)
  averageRating Float         @default(0)
  
  // Dates
  firstOrderAt  DateTime?
  lastOrderAt   DateTime?
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@unique([farmerId, buyerId])
  @@map("customer_relations")
}

// notification system

enum NotificationType {
  ORDER_UPDATE
  PAYMENT_RECEIVED
  NEW_MESSAGE
  PRODUCT_REVIEW
  STOCK_ALERT
  DELIVERY_UPDATE
  PROMOTION
  SYSTEM
}

model Notification {
  id            String           @id @default(cuid())
  userId        String
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type          NotificationType
  title         String
  message       String
  data          Json?            
  
  isRead        Boolean          @default(false)
  readAt        DateTime?
  
  createdAt     DateTime         @default(now())

  @@map("notifications")
}

// analytics and reporting
model UserAnalytics {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  date          DateTime @db.Date
  
  // Activity metrics
  pageViews     Int      @default(0)
  sessionTime   Int      @default(0) 
  ordersPlaced  Int      @default(0)
  revenue       Float    @default(0)
  
  // Engagement metrics
  messagesExchanged Int  @default(0)
  reviewsGiven  Int      @default(0)
  productsViewed Int     @default(0)
  
  createdAt     DateTime @default(now())
  
  @@unique([userId, date])
  @@map("user_analytics")
}

// system management

model UserSession {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  sessionToken  String   @unique
  ipAddress     String?
  userAgent     String?
  
  createdAt     DateTime @default(now())
  expiresAt     DateTime

  @@map("user_sessions")
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  PURCHASE
  REFUND
}

model AuditLog {
  id            String      @id @default(cuid())
  userId        String?
  user          User?       @relation(fields: [userId], references: [id])
  
  action        AuditAction
  resource      String      
  resourceId    String?     
  
  oldValues     Json?
  newValues     Json?
  
  ipAddress     String?
  userAgent     String?
  
  createdAt     DateTime    @default(now())

  @@map("audit_logs")
}
